{"version":3,"sources":["NussinovPlot.tsx","ForceGraph.tsx","nussinov.ts","App.tsx","cleanFastaFile.ts","index.tsx"],"names":["getOffsetAngle","numBases","arcOffset","Math","PI","getPieceAngle","piece","cos","sin","NussinovPlot","props","canvas","useRef","bases","pairs","useEffect","current","width","ctx","getContext","height","circleRadius","floor","circleX","circleY","length","lineWidth","beginPath","arc","stroke","pairsCount","font","i","angleX","angleY","moveTo","tickSize","lineTo","textRadius","fillText","gradient","createLinearGradient","addColorStop","strokeStyle","piece1","piece2","angleX1","angleY1","angleX2","angleY2","drawNussinovPlot","ref","clamp","num","min","max","Backtrace","ForceGraph","n","nodes","links","pairedNodes","Set","l","source","target","value","nussinovPair","inBulge","bpLink","push","add","has","id","bpText","charAt","isBp","drawnGraph","windowBuffer","windowBounds","ticksPerRender","linkColor","linkOpacity","startStopLinkOpacity","nodeRadiusPixels","startStopRadiusPixels","nodeColor","nodeFontSizeEm","startStopNodeColor","bulgeColor","intern","valueOf","N","d3","d","map","LS","LT","_","forceNode","forceLink","index","strength","link","distance","svg","attr","firstTick","simulation","force","on","theta","tau","radius","x","y","tick","node","circles","window","append","selectAll","data","join","enter","call","drag","style","text","sim","event","active","alphaTarget","restart","subject","fx","fy","Object","assign","drawForceGraph","appendChild","backtrack","bt","j","back","Matched","Left","Down","Bifurcate","k","Unmatched","nussinov","rna","minHairpinLength","dp","Array","from","m","indexPairs","dotParentheses","resultArr","fill","App","React","useState","setBases","setPairs","minHairpin","setMinHairpin","warnings","setWarnings","isDNAtoRNA","setIsDNAtoRNA","dotParenthesesOutput","setDotParenthesesOutput","updateGraph","newBases","newMinHairpin","undefined","thisMinHairpin","newPairs","defaultBases","warningsElements","warningStr","className","dnaToRnaSnippet","transform","htmlFor","spellCheck","rows","placeholder","onChange","e","basePairsStr","fasta","split","splice","messages","toUpperCase","includes","rnaStr","replace","replaceAll","message","sanitizeRNAString","filteredStr","rnaWarnings","concat","end","toString","bioCheck","updateBases","type","clampedMinHairpin","updateMinHairpin","Number","backgroundColor","color","fontFamily","borderRadius","overflowWrap","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb2492df.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * Finds the angle offset of a set of points arranged in a circle, starting at the top\n * @param numBases number of points in the circle\n * @returns the angle of the first point in the circle\n */\nexport function getOffsetAngle(numBases: number) {\n  let arcOffset = (2 * Math.PI * 270) / 360;\n  if (numBases > 1) {\n    arcOffset += (2 * Math.PI) / numBases / 2;\n  }\n  return arcOffset % (2 * Math.PI);\n}\n\n/**\n * Finds the x and y position of a point at a given angle on a circle\n * @param piece Fraction of the entire circle\n * @param arcOffset Offset angle\n * @returns The x and y position for a circle of radius 1\n */\nfunction getPieceAngle(piece: number, arcOffset: number): [number, number] {\n  return [Math.cos(arcOffset + piece * 2 * Math.PI), Math.sin(arcOffset + piece * 2 * Math.PI)];\n}\n\n/**\n * Draws a Nussinov plot on a canvas with base pairs\n * @param canvas Canvas element on which to draw\n * @param bases String of all the bases in order\n * @param pairs An array of base pair index arrays\n */\nexport function drawNussinovPlot(\n  canvas: HTMLCanvasElement,\n  bases: string,\n  pairs: [number, number][],\n  width: number,\n) {\n  const ctx = canvas.getContext('2d');\n  if (ctx === null) {\n    return;\n  }\n\n  const height = width;\n\n  const circleRadius = Math.floor(width / 2.4);\n  const circleX = width / 2;\n  const circleY = height / 2;\n\n  // Draw circle\n  const lineWidthThin = 0.3;\n  const lineWidthThick = 2;\n  const arcOffset = getOffsetAngle(bases.length);\n\n  if (bases.length < 2) {\n    // Draw complete circle\n    ctx.lineWidth = lineWidthThick;\n    ctx.beginPath();\n    ctx.arc(circleX, circleY, circleRadius, arcOffset + 0, arcOffset + 2 * Math.PI);\n    ctx.stroke();\n  } else {\n    // Draw small arc\n    ctx.lineWidth = lineWidthThin;\n    ctx.beginPath();\n    ctx.arc(\n      circleX,\n      circleY,\n      circleRadius,\n      arcOffset + (2 * Math.PI * (bases.length - 1)) / bases.length,\n      arcOffset + 2 * Math.PI,\n    );\n    ctx.stroke();\n    // Draw large arc\n    ctx.lineWidth = lineWidthThick;\n    ctx.beginPath();\n    ctx.arc(\n      circleX,\n      circleY,\n      circleRadius,\n      arcOffset + 0,\n      arcOffset + (2 * Math.PI * (bases.length - 1)) / bases.length,\n    );\n    ctx.stroke();\n  }\n\n  const pairsCount = bases.length;\n  const tickSize = 16;\n\n  // Draw each tick and symbol\n  ctx.font = '20px Arial';\n  for (let i = 0; i < pairsCount; i += 1) {\n    const piece = i / pairsCount;\n    const [angleX, angleY] = getPieceAngle(piece, arcOffset);\n\n    // Draw tick\n    ctx.beginPath();\n    ctx.moveTo(\n      circleX + angleX * (circleRadius - tickSize / 2),\n      circleY + angleY * (circleRadius - tickSize / 2),\n    );\n    ctx.lineTo(\n      circleX + angleX * (circleRadius + tickSize / 2),\n      circleY + angleY * (circleRadius + tickSize / 2),\n    );\n    ctx.stroke();\n\n    // Draw label\n    const textRadius = circleRadius + 20;\n    const offsetX = 7;\n    const offsetY = -7;\n    ctx.fillText(\n      bases[i],\n      circleX + angleX * textRadius - offsetX,\n      circleY + angleY * textRadius - offsetY,\n    );\n  }\n\n  // Set chord style\n  const gradient = ctx.createLinearGradient(0, 0, width, 0);\n  gradient.addColorStop(0, 'magenta');\n  gradient.addColorStop(0.5, 'blue');\n  gradient.addColorStop(1, 'red');\n  ctx.strokeStyle = gradient;\n  ctx.lineWidth = 3;\n\n  // Draw each chord\n  for (let i = 0; i < pairs.length; i += 1) {\n    const piece1 = pairs[i][0] / pairsCount;\n    const piece2 = pairs[i][1] / pairsCount;\n    const [angleX1, angleY1] = getPieceAngle(piece1, arcOffset);\n    const [angleX2, angleY2] = getPieceAngle(piece2, arcOffset);\n\n    // Draw chord line\n    ctx.beginPath();\n    ctx.moveTo(\n      circleX + angleX1 * circleRadius,\n      circleY + angleY1 * circleRadius,\n    );\n    ctx.lineTo(\n      circleX + angleX2 * circleRadius,\n      circleY + angleY2 * circleRadius,\n    );\n    ctx.stroke();\n  }\n}\nexport interface INussinovPlotProps {\n  bases: string,\n  pairs: [number, number][]\n}\n\nconst NussinovPlot = function NussinovPlot(props: INussinovPlotProps): JSX.Element {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const { bases, pairs } = props;\n  useEffect(() => {\n    if (canvas.current) {\n      drawNussinovPlot(canvas.current, bases, pairs, canvas.current.width);\n    }\n  }, []);\n\n  return (\n    <canvas width=\"550\" height=\"550\" ref={canvas} />\n  );\n};\n\nexport default NussinovPlot;\n","import * as d3 from 'd3';\nimport { useRef, useEffect } from 'react';\nimport { getOffsetAngle } from './NussinovPlot';\n\ninterface Link {\n  readonly source: number;\n  readonly target: number;\n  readonly value: number;\n  readonly nussinovPair: boolean;\n  readonly inBulge: boolean;\n  readonly bpLink: boolean;\n}\n\ninterface Node {\n  readonly id: number;\n  readonly bpText: string;\n  readonly isBp: boolean;\n  readonly inBulge: boolean;\n}\n\nexport interface IForceGraphProps {\n  bases: string,\n  pairs: [number, number][]\n}\n\nconst clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\n\n// Copyright 2021 Observable, Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/force-directed-graph\nfunction drawForceGraph(\n  { nodes, links }: any,\n  {\n    width = 700,\n    height = 500,\n    windowBuffer = 10,\n    windowBounds = 800,\n    ticksPerRender = 4,\n    linkColor = '#555',\n    linkOpacity = 0.7,\n    startStopLinkOpacity = 0.2,\n    nodeRadiusPixels = 5,\n    startStopRadiusPixels = 7,\n    nodeColor = '#333',\n    nodeFontSizeEm = '0.4em',\n    startStopNodeColor = '#888',\n    bulgeColor = '#252073',\n  }: any = { },\n) {\n  function intern(value: any) {\n    return value !== null && typeof value === 'object' ? value.valueOf() : value;\n  }\n\n  const N = d3.map(nodes, (d: any) => d.id).map(intern);\n  const LS = d3.map(links, ({ source }: any) => source).map(intern);\n  const LT = d3.map(links, ({ target }: any) => target).map(intern);\n\n  nodes = d3.map(nodes, (_, i) => ({ // eslint-disable-line\n    id: N[i],\n    bpText: nodes[i].bpText,\n    isBp: nodes[i].isBp,\n    inBulge: nodes[i].inBulge,\n  }));\n  links = d3.map(links, (_, i) => ({ // eslint-disable-line\n    source: LS[i],\n    target: LT[i],\n    nussinovPair: links[i].nussinovPair,\n    inBulge: links[i].inBulge,\n    bpLink: links[i].bpLink,\n  }));\n\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({ index: i }: any) => N[i]);\n\n  forceNode.strength(-5);\n\n  forceLink.strength((link: any): number => {\n    if (link.nussinovPair) {\n      return 0.5;\n    }\n    return 0.8;\n  });\n\n  forceLink.distance((link: any): number => {\n    if (link.nussinovPair) {\n      return 25;\n    }\n    return link.inBulge ? 15 : 8;\n  });\n\n  const svg = d3.create('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('viewBox', [-width / 2, -height / 2, width, height])\n    .attr('style', 'max-width: 100%; height: auto; height: intrinsic;');\n\n  let firstTick = true;\n\n  const simulation = d3.forceSimulation(nodes)\n    .force('link', forceLink)\n    .force('charge', forceNode)\n    .force('center', d3.forceCenter())\n    .on('tick', () => {\n      /* eslint-disable no-param-reassign */\n      if (firstTick) {\n        let theta = getOffsetAngle(nodes.length);\n        const tau = 2 * Math.PI;\n        const radius = nodes.length;\n        for (let i = 0; i < nodes.length; i += 1) {\n          nodes[i].x = radius * Math.cos(theta);\n          nodes[i].y = radius * Math.sin(theta);\n          theta += tau / nodes.length;\n        }\n      }\n\n      firstTick = false;\n      for (let i = 0; i < ticksPerRender; i += 1) {\n        simulation.tick();\n      }\n\n      link // eslint-disable-line\n        .attr('x1', (d: any) => d.source.x)\n        .attr('y1', (d: any) => d.source.y)\n        .attr('x2', (d: any) => d.target.x)\n        .attr('y2', (d: any) => d.target.y);\n\n      node // eslint-disable-line\n        .attr('cx', (d: any) => d.x)\n        .attr('cy', (d: any) => d.y);\n\n      circles // eslint-disable-line\n        .attr('cx', (d: any) => d.x)\n        .attr('cy', (d: any) => d.y);\n\n      bpText // eslint-disable-line\n        .attr('x', (d: any) => d.x)\n        .attr('y', (d: any) => d.y);\n\n      if (nodes.length > 0) {\n        let window = [nodes[0].x, nodes[0].y, nodes[0].x, nodes[0].y];\n        for (let i = 1; i < nodes.length; i += 1) {\n          window = [\n            Math.min(nodes[i].x, window[0]),\n            Math.min(nodes[i].y, window[1]),\n            Math.max(nodes[i].x, window[2]),\n            Math.max(nodes[i].y, window[3])];\n        }\n\n        svg\n          .attr('viewBox', [\n            clamp(window[0] - windowBuffer, -windowBounds, windowBounds),\n            clamp(window[1] - windowBuffer, -windowBounds, windowBounds),\n            clamp(window[2] - window[0] + 2 * windowBuffer, -windowBounds, windowBounds),\n            clamp(window[3] - window[1] + 2 * windowBuffer, -windowBounds, windowBounds),\n          ]);\n      }\n    });\n\n  const link = svg.append('g')\n    .attr('stroke', linkColor)\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('stroke-opacity', (l: any): string => (l.bpLink ? linkOpacity : startStopLinkOpacity))\n    .attr('stroke-dasharray', (l: any): string => (l.nussinovPair ? '1' : ''));\n\n  const node = svg.selectAll('circle')\n    .attr('stroke', nodeColor)\n    .data(nodes)\n    .enter()\n    .append('g');\n\n  const circles = node.append('circle')\n    .attr('r', (n: any): string => (n.isBp ? nodeRadiusPixels : startStopRadiusPixels))\n    .attr('fill', (n: any): string => {\n      if (n.isBp) {\n        return n.inBulge ? bulgeColor : nodeColor;\n      }\n      return startStopNodeColor;\n    })\n    .call(drag(simulation)); // eslint-disable-line\n\n  const bpText = node.append('text')\n    .style('fill', 'white')\n    .style('font-size', (n: any): string => (n.isBp ? nodeFontSizeEm : '0.3em'))\n    .attr('text-anchor', 'middle')\n    .attr('dy', nodeFontSizeEm)\n    .attr('pointer-events', 'none')\n    .text((n: any): string => n.bpText);\n\n  function drag(sim: any): any {\n  /* eslint-disable no-param-reassign */\n    function dragstarted(event: any) {\n      if (!event.active) sim.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event: any) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event: any) {\n      if (!event.active) sim.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    return d3.drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  }\n\n  return Object.assign(svg.node(), { });\n}\n\nconst ForceGraph = function ForceGraph(props: IForceGraphProps): JSX.Element {\n  const { bases, pairs } = props;\n  const n = bases.length;\n\n  const nodes: Node[] = [];\n  const links: Link[] = [];\n  const pairedNodes: Set<number> = new Set<number>();\n  let i = 0;\n\n  for (; i < pairs.length; i += 1) {\n    const l: Link = {\n      source: +pairs[i][0],\n      target: +pairs[i][1],\n      value: 1,\n      nussinovPair: true,\n      inBulge: false,\n      bpLink: true,\n    };\n    if (l.source < n && l.target < n) {\n      links.push(l);\n    }\n    pairedNodes.add(l.source);\n    pairedNodes.add(l.target);\n  }\n\n  for (i = 0; i < n; i += 1) {\n    if (i < n - 1) {\n      links.push({\n        source: i,\n        target: i + 1,\n        value: 1,\n        nussinovPair: false,\n        inBulge: !pairedNodes.has(i) || !pairedNodes.has(i + 1),\n        bpLink: true,\n      });\n    }\n    nodes.push({\n      id: i, bpText: bases.charAt(i), isBp: true, inBulge: pairedNodes.has(i),\n    });\n  }\n\n  // Add start/stop indicators\n  if (n > 0) {\n    nodes.push({\n      id: -1, bpText: 'start', isBp: false, inBulge: false,\n    });\n    nodes.push({\n      id: n, bpText: 'end', isBp: false, inBulge: false,\n    });\n    links.push({\n      source: -1, target: 0, value: 1, nussinovPair: false, inBulge: true, bpLink: false,\n    });\n    links.push({\n      source: n - 1, target: n, value: 1, nussinovPair: false, inBulge: true, bpLink: false,\n    });\n  }\n\n  const forceGraph = {\n    nodes,\n    links,\n  };\n\n  const drawnGraph = drawForceGraph(forceGraph);\n  const svg = useRef<SVGSVGElement>(null);\n  useEffect(() => {\n    if (svg.current) {\n      svg.current.appendChild(drawnGraph);\n    }\n  }, []);\n\n  return (\n    <svg width=\"700\" height=\"500\" ref={svg} />\n  );\n};\n\nexport default ForceGraph;\n","enum Backtrace {\n  Bifurcate,\n  Left,\n  Down,\n  Matched,\n  Unmatched,\n}\n\nfunction backtrack(bt: [Backtrace, number][][], pairs: [number, number][], i: number, j: number) {\n  if (i < j) {\n    const back: Backtrace = bt[i][j][0];\n    if (back === Backtrace.Matched) {\n      pairs.push([i, j]);\n      backtrack(bt, pairs, i + 1, j - 1);\n    } else if (back === Backtrace.Left) {\n      backtrack(bt, pairs, i, j - 1);\n    } else if (back === Backtrace.Down) {\n      backtrack(bt, pairs, i + 1, j);\n    } else if (back === Backtrace.Bifurcate) {\n      const k = bt[i][j][1];\n      backtrack(bt, pairs, i, k);\n      backtrack(bt, pairs, k + 1, j);\n    } else if (back === Backtrace.Unmatched) {\n      backtrack(bt, pairs, i + 1, j - 1);\n    }\n  }\n}\n\nexport default function nussinov(rna: string, minHairpinLength: number = 2, pairs: Set<string> = new Set(['AU', 'UA', 'GC', 'CG'])) {\n  const n = rna.length;\n  const dp: number[][] = Array.from({ length: n }, () => Array.from({ length: n }, () => 0));\n  const bt: [Backtrace, number][][] = Array.from(\n    { length: n },\n    () => Array.from({ length: n }, () => [Backtrace.Unmatched, 0]),\n  );\n\n  for (let j = 0; j < n; j += 1) {\n    for (let i = j - minHairpinLength - 1; i >= 0; i -= 1) {\n      let m = dp[i + 1][j - 1];\n      let back: [Backtrace, number] = [Backtrace.Unmatched, 0];\n      if (pairs.has(rna.charAt(i) + rna.charAt(j))) {\n        back = [Backtrace.Matched, 0];\n        m += 1;\n      }\n\n      if (dp[i + 1][j] > m) {\n        back = [Backtrace.Down, 0];\n        m = dp[i + 1][j];\n      } else if (dp[i][j - 1] > m) {\n        back = [Backtrace.Left, 0];\n        m = dp[i][j - 1];\n      }\n\n      for (let k = i + 1; k < j; k += 1) {\n        if (dp[i][k] + dp[k + 1][j] > m) {\n          back = [Backtrace.Bifurcate, k];\n          m = dp[i][k] + dp[k + 1][j];\n        }\n      }\n\n      dp[i][j] = m;\n      bt[i][j] = back;\n    }\n  }\n\n  const indexPairs: [number, number][] = [];\n  backtrack(bt, indexPairs, 0, n - 1);\n  return indexPairs;\n}\n\n/**\n * Returns the dot-parentheses format of base pairings\n * @param numBases the total number of bases\n * @param pairs an array of base pairs by index\n * @returns the dot-parentheses representation of the base pairings\n */\nexport function dotParentheses(numBases: number, pairs: [number, number][]): string {\n  const resultArr = Array(numBases).fill('.');\n  for (let i = 0; i < pairs.length; i += 1) {\n    resultArr[pairs[i][0]] = '(';\n    resultArr[pairs[i][1]] = ')';\n  }\n  return resultArr.join('');\n}\n","import React, { useEffect } from 'react';\nimport NussinovPlot from './NussinovPlot';\nimport ForceGraph from './ForceGraph';\nimport 'bootswatch/dist/cerulean/bootstrap.css';\nimport nussinov, { dotParentheses } from './nussinov';\nimport { bioCheck, sanitizeRNAString } from './cleanFastaFile';\n\nconst App = function App() {\n  const [bases, setBases] = React.useState('');\n  const [pairs, setPairs] = React.useState<[number, number][]>([]);\n  const [minHairpin, setMinHairpin] = React.useState<number>();\n  const [warnings, setWarnings] = React.useState<Array<string>>([]);\n  const [isDNAtoRNA, setIsDNAtoRNA] = React.useState<boolean>(false);\n  const [dotParenthesesOutput, setDotParenthesesOutput] = React.useState<string>('');\n\n  /**\n   * Sets the graph as a new set of bases\n   * @param newBases List of bases, as a string\n   * @param newMinHairpin New minimum hairpin length\n   */\n  function updateGraph(newBases: string, newMinHairpin: undefined | number = undefined) {\n    let thisMinHairpin = minHairpin;\n    if (newMinHairpin !== undefined) {\n      thisMinHairpin = newMinHairpin;\n    }\n    const newPairs = nussinov(newBases, thisMinHairpin);\n    setPairs(newPairs);\n    setDotParenthesesOutput(dotParentheses(newBases.length, newPairs));\n  }\n\n  /**\n   * Filters the bases string and updates warnings and labels\n   * @param newBases String of bases to use in the visualization\n   */\n  function updateBases(newBases: string) {\n    const [filteredStr, rnaSanitizeWarns] = sanitizeRNAString(newBases);\n    let rnaWarnings: Array<string> = rnaSanitizeWarns;\n    rnaWarnings = rnaWarnings.concat(bioCheck(filteredStr));\n    setWarnings(rnaWarnings);\n    setIsDNAtoRNA(newBases.toUpperCase().includes('T'));\n    setBases(filteredStr);\n    updateGraph(filteredStr);\n  }\n\n  useEffect(() => {\n    // Called on component load\n    const defaultBases = 'AAAACCAAAGGGGGUUGA';\n    const defaultMinHairpin = 2;\n    setMinHairpin(defaultMinHairpin);\n    setBases(defaultBases);\n    updateGraph(defaultBases);\n  }, []);\n\n  function updateMinHairpin(newMinHairpin: number) {\n    const clampedMinHairpin = Math.min(bases.length, Math.max(0, newMinHairpin));\n    setMinHairpin(clampedMinHairpin);\n    updateGraph(bases, clampedMinHairpin);\n  }\n\n  const warningsElements: Array<JSX.Element> = warnings.map((warningStr) => (\n    <div className=\"alert alert-info\">\n      {warningStr}\n    </div>\n  ));\n\n  const dnaToRnaSnippet: JSX.Element = isDNAtoRNA ? <span className=\"h5 badge bg-primary\" style={{ transform: 'scale(0.7)' }}>DNA&#10142;RNA</span> : <span />;\n\n  return (\n    <div className=\"container-md\">\n      <h1 className=\"text-center\">Nussinov RNA Secondary Structure Visualizer</h1>\n      <p className=\"text-center\">by jaa2, Jpn3, and SethWyma</p>\n      <div className=\"row g-3\">\n        <div className=\"col-9\">\n          <label htmlFor=\"bases-input\" className=\"form-label\">Bases of the RNA strand</label>\n          <textarea spellCheck=\"false\" className=\"form-control\" id=\"bases-input\" rows={1} placeholder=\"AAAACCAAAGGGGGUUGA...\" onChange={(e) => { updateBases(e.target.value); }} />\n        </div>\n        <div className=\"col-3\">\n          <label htmlFor=\"bases-input\" className=\"form-label\">Minimum hairpin length</label>\n          <input className=\"form-control\" id=\"min-hairpin-input\" type=\"number\" min=\"0\" value={minHairpin} onChange={(e) => { updateMinHairpin(Number(e.target.value)); }} />\n        </div>\n      </div>\n\n      <br />\n      <div className=\"d-flex flex-row flex-wrap graphs-box mb-4\">\n        <div>\n          <h3 className=\"text-center\">\n            Nussinov Plot\n            {dnaToRnaSnippet}\n          </h3>\n          <div style={{ width: '550px', height: '550px' }}>\n            <NussinovPlot key={`C${bases}_${minHairpin}`} bases={bases} pairs={pairs} />\n          </div>\n        </div>\n        <div>\n          <h3 className=\"text-center\">Force-Directed Graph</h3>\n          <div style={{ width: '700px', height: '500px' }}>\n            <ForceGraph key={`F${bases}_${minHairpin}`} bases={bases} pairs={pairs} />\n          </div>\n        </div>\n      </div>\n      <br />\n      <h3>Dot-Parentheses Format</h3>\n      <div\n        className=\"px-2\"\n        style={{\n          backgroundColor: '#868e96', color: '#dee2e6', fontFamily: 'monospace', borderRadius: '10px', overflowWrap: 'anywhere',\n        }}\n      >\n        {dotParenthesesOutput}\n      </div>\n      <br />\n      {warningsElements}\n    </div>\n  );\n};\n\nexport default App;\n","// Message if both DNA and RNA bases are included\nexport const mixedInputMessage: string = 'Both DNA bases (T) and RNA bases (U) found in input. Mixed input not expected.';\n\n/**\n * Sanitizes an string of RNA bases and converts DNA to RNA.\n * @param data An RNA string, a DNA string, or a FASTA file type string\n * @returns an array containing the cleaned RNA string and all warning messages\n */\nexport function sanitizeRNAString(data: string): [string, string[]] {\n  // identify and clean fasta file\n  let basePairsStr:string = '';\n  if (data[0] === '>') {\n    const fasta: string[] = data.split('\\n');\n    fasta.splice(0, 1);\n    basePairsStr = fasta.join('');\n  } else {\n    basePairsStr = data;\n  }\n\n  basePairsStr = basePairsStr.toUpperCase();\n\n  const messages: string[] = [];\n\n  // Check if DNA and RNA are both (possibly) present\n  if (basePairsStr.includes('T') && basePairsStr.includes('U')) {\n    messages.push(mixedInputMessage);\n  }\n\n  // Converts DNA to RNA\n  basePairsStr = basePairsStr.replace(/\\s/g, '');\n  basePairsStr = basePairsStr.replace(/T/g, 'U');\n  const rnaStr = basePairsStr.replaceAll(/[^GACU]/g, '');\n\n  if (rnaStr.length !== basePairsStr.length) {\n    // We are ignoring some characters\n    const message = `Characters ignored: ${basePairsStr.replaceAll(/[GACU]/g, '')}`;\n    messages.push(message);\n  }\n\n  // No characters are ignored\n  return [rnaStr, messages];\n}\n\n/**\n * This function checks for some common RNA string errors and then returns an array that notes them\n * @param data A cleaned string from the sanitizeRNAString function\n * @returns an array of the potential errors of the passed RNA string\n */\nexport function bioCheck(data: string): string[] {\n  if (data.length === 0) {\n    return [];\n  }\n  const messages: string[] = [];\n  if (data.length % 3 !== 0) {\n    messages.push('The RNA sequence is not divisible by 3; the string has an ambiguous protein.');\n  }\n  if (data.length >= 3) {\n    let end = '';\n    end = end.concat(\n      (data[data.length - 3]).toString(),\n      (data[data.length - 2]).toString(),\n      (data[data.length - 1]).toString(),\n    );\n    if (!(end === 'UAA' || end === 'UAG' || end === 'UGA')) {\n      messages.push(\"None of the end codons ('UAA,' 'UAG,' or 'UGA') were found at the end of the input.\");\n    }\n  }\n  return (messages);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}