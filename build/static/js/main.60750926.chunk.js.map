{"version":3,"sources":["NussinovPlot.tsx","nussinov.ts","App.tsx","cleanFastaFile.ts","index.tsx"],"names":["getPieceAngle","piece","Math","cos","PI","sin","Backtrace","NussinovPlot","props","canvas","useRef","bases","pairs","useEffect","current","ctx","getContext","width","circleRadius","floor","circleX","circleY","height","lineWidth","beginPath","arc","stroke","pairsCount","length","font","i","angleX","angleY","moveTo","tickSize","lineTo","textRadius","fillText","gradient","createLinearGradient","addColorStop","strokeStyle","piece1","piece2","angleX1","angleY1","angleX2","angleY2","drawNussinovPlot","ref","backtrack","bt","j","back","Matched","push","Left","Down","Bifurcate","k","Unmatched","App","React","useState","setBases","setPairs","minHairpin","setMinHairpin","warnings","setWarnings","isDNAtoRNA","setIsDNAtoRNA","dotParenthesesOutput","setDotParenthesesOutput","updateBases","newBases","data","dataArr","split","basePairsStr","messages","toUpperCase","includes","rnaStr","replace","replaceAll","message","sanitizeRNAString","filteredStr","rnaWarnings","concat","end","toString","bioCheck","newPairs","rna","minHairpinLength","Set","n","dp","Array","from","m","has","charAt","indexPairs","nussinov","numBases","resultArr","fill","join","dotParentheses","warningsElements","map","warningStr","className","dnaToRnaSnippet","style","transform","htmlFor","id","type","placeholder","onChange","e","target","value","newMinHairpin","clampedMinHairpin","min","max","updateMinHairpin","backgroundColor","color","fontFamily","borderRadius","overflowWrap","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60750926.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * Finds the x and y position of a point at a given angle on a circle\n * @param piece Fraction of the entire circle\n * @returns The x and y position for a circle of radius 1\n */\nfunction getPieceAngle(piece: number): [number, number] {\n  return [Math.cos(piece * 2 * Math.PI), Math.sin(piece * 2 * Math.PI)];\n}\n\n/**\n * Draws a Nussinov plot on a canvas with base pairs\n * @param canvas Canvas element on which to draw\n * @param bases String of all the bases in order\n * @param pairs An array of base pair index arrays\n */\nexport function drawNussinovPlot(\n  canvas: HTMLCanvasElement,\n  bases: string,\n  pairs: [number, number][],\n) {\n  const ctx = canvas.getContext('2d');\n  if (ctx === null) {\n    return;\n  }\n\n  const width = 500;\n  const height = width;\n\n  const circleRadius = Math.floor(width / 2.4);\n  const circleX = width / 2;\n  const circleY = height / 2;\n\n  // Draw circle\n  ctx.lineWidth = 2;\n  ctx.beginPath();\n  ctx.arc(circleX, circleY, circleRadius, 0, 2 * Math.PI);\n  ctx.stroke();\n\n  const pairsCount = bases.length;\n  const tickSize = 16;\n\n  // Draw each tick and symbol\n  ctx.font = '20px Arial';\n  for (let i = 0; i < pairsCount; i += 1) {\n    const piece = i / pairsCount;\n    const [angleX, angleY] = getPieceAngle(piece);\n\n    // Draw tick\n    ctx.beginPath();\n    ctx.moveTo(\n      circleX + angleX * (circleRadius - tickSize / 2),\n      circleY + angleY * (circleRadius - tickSize / 2),\n    );\n    ctx.lineTo(\n      circleX + angleX * (circleRadius + tickSize / 2),\n      circleY + angleY * (circleRadius + tickSize / 2),\n    );\n    ctx.stroke();\n\n    // Draw label\n    const textRadius = circleRadius + 20;\n    const offsetX = 7;\n    const offsetY = -7;\n    ctx.fillText(\n      bases[i],\n      circleX + angleX * textRadius - offsetX,\n      circleY + angleY * textRadius - offsetY,\n    );\n  }\n\n  // Set chord style\n  const gradient = ctx.createLinearGradient(0, 0, width, 0);\n  gradient.addColorStop(0, 'magenta');\n  gradient.addColorStop(0.5, 'blue');\n  gradient.addColorStop(1, 'red');\n  ctx.strokeStyle = gradient;\n  ctx.lineWidth = 3;\n\n  // Draw each chord\n  for (let i = 0; i < pairs.length; i += 1) {\n    const piece1 = pairs[i][0] / pairsCount;\n    const piece2 = pairs[i][1] / pairsCount;\n    const [angleX1, angleY1] = getPieceAngle(piece1);\n    const [angleX2, angleY2] = getPieceAngle(piece2);\n\n    // Draw chord line\n    ctx.beginPath();\n    ctx.moveTo(\n      circleX + angleX1 * circleRadius,\n      circleY + angleY1 * circleRadius,\n    );\n    ctx.lineTo(\n      circleX + angleX2 * circleRadius,\n      circleY + angleY2 * circleRadius,\n    );\n    ctx.stroke();\n  }\n}\nexport interface INussinovPlotProps {\n  bases: string,\n  pairs: [number, number][]\n}\n\nconst NussinovPlot = function NussinovPlot(props: INussinovPlotProps): JSX.Element {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const { bases, pairs } = props;\n  useEffect(() => {\n    if (canvas.current) {\n      drawNussinovPlot(canvas.current, bases, pairs);\n    }\n  }, []);\n\n  return (\n    <canvas width=\"500\" height=\"500\" ref={canvas} />\n  );\n};\n\nexport default NussinovPlot;\n","enum Backtrace {\n  Bifurcate,\n  Left,\n  Down,\n  Matched,\n  Unmatched,\n}\n\nfunction backtrack(bt: [Backtrace, number][][], pairs: [number, number][], i: number, j: number) {\n  if (i < j) {\n    const back: Backtrace = bt[i][j][0];\n    if (back === Backtrace.Matched) {\n      pairs.push([i, j]);\n      backtrack(bt, pairs, i + 1, j - 1);\n    } else if (back === Backtrace.Left) {\n      backtrack(bt, pairs, i, j - 1);\n    } else if (back === Backtrace.Down) {\n      backtrack(bt, pairs, i + 1, j);\n    } else if (back === Backtrace.Bifurcate) {\n      const k = bt[i][j][1];\n      backtrack(bt, pairs, i, k);\n      backtrack(bt, pairs, k + 1, j);\n    } else if (back === Backtrace.Unmatched) {\n      backtrack(bt, pairs, i + 1, j - 1);\n    }\n  }\n}\n\nexport default function nussinov(rna: string, minHairpinLength: number = 2, pairs: Set<string> = new Set(['AU', 'UA', 'GC', 'CG'])) {\n  const n = rna.length;\n  const dp: number[][] = Array.from({ length: n }, () => Array.from({ length: n }, () => 0));\n  const bt: [Backtrace, number][][] = Array.from(\n    { length: n },\n    () => Array.from({ length: n }, () => [Backtrace.Unmatched, 0]),\n  );\n\n  for (let j = 0; j < n; j += 1) {\n    for (let i = j - minHairpinLength; i >= 0; i -= 1) {\n      let m = dp[i + 1][j - 1];\n      let back: [Backtrace, number] = [Backtrace.Unmatched, 0];\n      if (pairs.has(rna.charAt(i) + rna.charAt(j))) {\n        back = [Backtrace.Matched, 0];\n        m += 1;\n      }\n\n      if (dp[i + 1][j] > m) {\n        back = [Backtrace.Down, 0];\n        m = dp[i + 1][j];\n      } else if (dp[i][j - 1] > m) {\n        back = [Backtrace.Left, 0];\n        m = dp[i][j - 1];\n      }\n\n      for (let k = i + 1; k < j; k += 1) {\n        if (dp[i][k] + dp[k + 1][j] > m) {\n          back = [Backtrace.Bifurcate, k];\n          m = dp[i][k] + dp[k + 1][j];\n        }\n      }\n\n      dp[i][j] = m;\n      bt[i][j] = back;\n    }\n  }\n\n  const indexPairs: [number, number][] = [];\n  backtrack(bt, indexPairs, 0, n - 1);\n  return indexPairs;\n}\n\n/**\n * Returns the dot-parentheses format of base pairings\n * @param numBases the total number of bases\n * @param pairs an array of base pairs by index\n * @returns the dot-parentheses representation of the base pairings\n */\nexport function dotParentheses(numBases: number, pairs: [number, number][]): string {\n  const resultArr = Array(numBases).fill('.');\n  for (let i = 0; i < pairs.length; i += 1) {\n    resultArr[pairs[i][0]] = '(';\n    resultArr[pairs[i][1]] = ')';\n  }\n  return resultArr.join('');\n}\n","import React, { useEffect } from 'react';\nimport NussinovPlot from './NussinovPlot';\nimport 'bootswatch/dist/cerulean/bootstrap.css';\nimport nussinov, { dotParentheses } from './nussinov';\nimport { bioCheck, sanitizeRNAString } from './cleanFastaFile';\n\nconst App = function App() {\n  const [bases, setBases] = React.useState('');\n  const [pairs, setPairs] = React.useState<[number, number][]>([]);\n  const [minHairpin, setMinHairpin] = React.useState<number>();\n  const [warnings, setWarnings] = React.useState<Array<string>>([]);\n  const [isDNAtoRNA, setIsDNAtoRNA] = React.useState<boolean>(false);\n  const [dotParenthesesOutput, setDotParenthesesOutput] = React.useState<string>('');\n\n  /**\n   * Sets the graph as a new set of bases\n   * @param newBases List of bases, as a string\n   */\n  function updateBases(newBases: string) {\n    const [filteredStr, rnaSanitizeWarns] = sanitizeRNAString(newBases);\n    let rnaWarnings: Array<string> = rnaSanitizeWarns;\n    rnaWarnings = rnaWarnings.concat(bioCheck(filteredStr));\n    setWarnings(rnaWarnings);\n    setIsDNAtoRNA(newBases.toUpperCase().includes('T'));\n    const newPairs = nussinov(filteredStr, minHairpin);\n    setPairs(newPairs);\n    setDotParenthesesOutput(dotParentheses(filteredStr.length, newPairs));\n    setBases(filteredStr);\n  }\n\n  useEffect(() => {\n    // Called on component load\n    const defaultBases = 'GAUUACAGAUAA';\n    const defaultMinHairpin = 2;\n    setMinHairpin(defaultMinHairpin);\n    updateBases(defaultBases);\n  }, []);\n\n  function updateMinHairpin(newMinHairpin: number) {\n    const clampedMinHairpin = Math.min(bases.length, Math.max(1, newMinHairpin));\n    setMinHairpin(clampedMinHairpin);\n    updateBases(bases);\n  }\n\n  const warningsElements: Array<JSX.Element> = warnings.map((warningStr) => (\n    <div className=\"alert alert-info\">\n      {warningStr}\n    </div>\n  ));\n\n  const dnaToRnaSnippet: JSX.Element = isDNAtoRNA ? <span className=\"h5 badge bg-primary\" style={{ transform: 'scale(0.7)' }}>DNA&#10142;RNA</span> : <span />;\n\n  return (\n    <div className=\"container-sm\">\n      <h1 className=\"text-center\">Nussinov RNA Secondary Structure Visualizer</h1>\n      <p className=\"text-center\">by jaa2, Jpn3, and SethWyma</p>\n      <div className=\"row g-3\">\n        <div className=\"col-9\">\n          <label htmlFor=\"bases-input\" className=\"form-label\">Bases of the RNA strand</label>\n          <input className=\"form-control\" id=\"bases-input\" type=\"text\" placeholder=\"GAUUACAGAUAA...\" onChange={(e) => { updateBases(e.target.value); }} />\n        </div>\n        <div className=\"col-3\">\n          <label htmlFor=\"bases-input\" className=\"form-label\">Minimum hairpin length</label>\n          <input className=\"form-control\" id=\"min-hairpin-input\" type=\"number\" value={minHairpin} onChange={(e) => { updateMinHairpin(+e.target.value); }} />\n        </div>\n      </div>\n\n      <br />\n      <h3>\n        Nussinov Plot\n        {dnaToRnaSnippet}\n      </h3>\n      <NussinovPlot key={bases + minHairpin} bases={bases} pairs={pairs} />\n      <br />\n      <h3>Dot-Parentheses Format</h3>\n      <div\n        className=\"px-2\"\n        style={{\n          backgroundColor: '#868e96', color: '#dee2e6', fontFamily: 'monospace', borderRadius: '10px', overflowWrap: 'anywhere',\n        }}\n      >\n        {dotParenthesesOutput}\n      </div>\n      <br />\n      {warningsElements}\n    </div>\n  );\n};\n\nexport default App;\n","// Message if both DNA and RNA bases are included\nexport const mixedInputMessage: string = 'Both DNA bases (T) and RNA bases (U) found in input. Mixed input not expected.';\n\n/**\n * Sanitizes an string of RNA bases and converts DNA to RNA.\n * @param data An RNA string, a DNA string, or a FASTA file type string\n * @returns an array containing the cleaned RNA string and all warning messages\n */\nexport function sanitizeRNAString(data: string): [string, string[]] {\n  const dataArr: string[] = data.split(' ');\n  let basePairsStr:string = dataArr[dataArr.length - 1];\n  basePairsStr = basePairsStr.toUpperCase();\n\n  const messages: string[] = [];\n\n  // Check if DNA and RNA are both (possibly) present\n  if (basePairsStr.includes('T') && basePairsStr.includes('U')) {\n    messages.push(mixedInputMessage);\n  }\n\n  // Converts DNA to RNA\n  basePairsStr = basePairsStr.replace(/T/g, 'U');\n  const rnaStr = basePairsStr.replaceAll(/[^GACU]/g, '');\n\n  if (rnaStr.length !== basePairsStr.length) {\n    // We are ignoring some characters\n    const message = `Characters ignored: ${basePairsStr.replaceAll(/[GACU]/g, '')}`;\n    messages.push(message);\n  }\n\n  // No characters are ignored\n  return [rnaStr, messages];\n}\n\n/**\n * This function checks for some common RNA string errors and then returns an array that notes them\n * @param data A cleaned string from the sanitizeRNAString function\n * @returns an array of the potential errors of the passed RNA string\n */\nexport function bioCheck(data: string): string[] {\n  if (data.length === 0) {\n    return [];\n  }\n  const messages: string[] = [];\n  if (data.length % 3 !== 0) {\n    messages.push('The RNA sequence is not divisible by 3; the string has an ambiguous protein.');\n  }\n  if (data.length >= 3) {\n    let end = '';\n    end = end.concat(\n      (data[data.length - 3]).toString(),\n      (data[data.length - 2]).toString(),\n      (data[data.length - 1]).toString(),\n    );\n    if (!(end === 'UAA' || end === 'UAG' || end === 'UGA')) {\n      messages.push('The RNA sequence does not contain a proper end sequence.');\n    }\n  }\n  return (messages);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}