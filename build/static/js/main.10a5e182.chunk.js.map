{"version":3,"sources":["NussinovPlot.tsx","ForceGraph.tsx","nussinov.ts","App.tsx","cleanFastaFile.ts","index.tsx"],"names":["getPieceAngle","piece","Math","cos","PI","sin","NussinovPlot","props","canvas","useRef","bases","pairs","useEffect","current","ctx","getContext","width","circleRadius","floor","circleX","circleY","height","lineWidth","beginPath","arc","stroke","pairsCount","length","font","i","angleX","angleY","moveTo","tickSize","lineTo","textRadius","fillText","gradient","createLinearGradient","addColorStop","strokeStyle","piece1","piece2","angleX1","angleY1","angleX2","angleY2","drawNussinovPlot","ref","clamp","num","min","max","Backtrace","ForceGraph","n","nodes","links","pairedNodes","Set","l","source","target","value","nussinovPair","inBulge","push","add","has","id","drawnGraph","windowBuffer","windowBounds","linkColor","linkOpacity","nodeRadiusPixels","nodeColor","nodeFontSizeEm","intern","valueOf","N","d3","d","map","LS","LT","_","forceNode","forceLink","index","strength","link","distance","svg","attr","tick","simulation","force","on","theta","tau","radius","x","y","node","circles","bpText","window","append","selectAll","data","join","enter","call","drag","style","text","sim","event","active","alphaTarget","restart","subject","fx","fy","Object","assign","drawForceGraph","appendChild","backtrack","bt","j","back","Matched","Left","Down","Bifurcate","k","Unmatched","App","React","useState","setBases","setPairs","minHairpin","setMinHairpin","warnings","setWarnings","isDNAtoRNA","setIsDNAtoRNA","dotParenthesesOutput","setDotParenthesesOutput","updateBases","newBases","dataArr","split","basePairsStr","messages","toUpperCase","includes","rnaStr","replace","replaceAll","message","sanitizeRNAString","filteredStr","rnaWarnings","concat","end","toString","bioCheck","newPairs","rna","minHairpinLength","dp","Array","from","m","charAt","indexPairs","nussinov","numBases","resultArr","fill","dotParentheses","warningsElements","warningStr","className","dnaToRnaSnippet","transform","htmlFor","type","placeholder","onChange","e","newMinHairpin","clampedMinHairpin","updateMinHairpin","backgroundColor","color","fontFamily","borderRadius","overflowWrap","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10a5e182.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * Finds the x and y position of a point at a given angle on a circle\n * @param piece Fraction of the entire circle\n * @returns The x and y position for a circle of radius 1\n */\nfunction getPieceAngle(piece: number): [number, number] {\n  return [Math.cos(piece * 2 * Math.PI), Math.sin(piece * 2 * Math.PI)];\n}\n\n/**\n * Draws a Nussinov plot on a canvas with base pairs\n * @param canvas Canvas element on which to draw\n * @param bases String of all the bases in order\n * @param pairs An array of base pair index arrays\n */\nexport function drawNussinovPlot(\n  canvas: HTMLCanvasElement,\n  bases: string,\n  pairs: [number, number][],\n) {\n  const ctx = canvas.getContext('2d');\n  if (ctx === null) {\n    return;\n  }\n\n  const width = 500;\n  const height = width;\n\n  const circleRadius = Math.floor(width / 2.4);\n  const circleX = width / 2;\n  const circleY = height / 2;\n\n  // Draw circle\n  ctx.lineWidth = 2;\n  ctx.beginPath();\n  ctx.arc(circleX, circleY, circleRadius, 0, 2 * Math.PI);\n  ctx.stroke();\n\n  const pairsCount = bases.length;\n  const tickSize = 16;\n\n  // Draw each tick and symbol\n  ctx.font = '20px Arial';\n  for (let i = 0; i < pairsCount; i += 1) {\n    const piece = i / pairsCount;\n    const [angleX, angleY] = getPieceAngle(piece);\n\n    // Draw tick\n    ctx.beginPath();\n    ctx.moveTo(\n      circleX + angleX * (circleRadius - tickSize / 2),\n      circleY + angleY * (circleRadius - tickSize / 2),\n    );\n    ctx.lineTo(\n      circleX + angleX * (circleRadius + tickSize / 2),\n      circleY + angleY * (circleRadius + tickSize / 2),\n    );\n    ctx.stroke();\n\n    // Draw label\n    const textRadius = circleRadius + 20;\n    const offsetX = 7;\n    const offsetY = -7;\n    ctx.fillText(\n      bases[i],\n      circleX + angleX * textRadius - offsetX,\n      circleY + angleY * textRadius - offsetY,\n    );\n  }\n\n  // Set chord style\n  const gradient = ctx.createLinearGradient(0, 0, width, 0);\n  gradient.addColorStop(0, 'magenta');\n  gradient.addColorStop(0.5, 'blue');\n  gradient.addColorStop(1, 'red');\n  ctx.strokeStyle = gradient;\n  ctx.lineWidth = 3;\n\n  // Draw each chord\n  for (let i = 0; i < pairs.length; i += 1) {\n    const piece1 = pairs[i][0] / pairsCount;\n    const piece2 = pairs[i][1] / pairsCount;\n    const [angleX1, angleY1] = getPieceAngle(piece1);\n    const [angleX2, angleY2] = getPieceAngle(piece2);\n\n    // Draw chord line\n    ctx.beginPath();\n    ctx.moveTo(\n      circleX + angleX1 * circleRadius,\n      circleY + angleY1 * circleRadius,\n    );\n    ctx.lineTo(\n      circleX + angleX2 * circleRadius,\n      circleY + angleY2 * circleRadius,\n    );\n    ctx.stroke();\n  }\n}\nexport interface INussinovPlotProps {\n  bases: string,\n  pairs: [number, number][]\n}\n\nconst NussinovPlot = function NussinovPlot(props: INussinovPlotProps): JSX.Element {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const { bases, pairs } = props;\n  useEffect(() => {\n    if (canvas.current) {\n      drawNussinovPlot(canvas.current, bases, pairs);\n    }\n  }, []);\n\n  return (\n    <canvas width=\"500\" height=\"500\" ref={canvas} />\n  );\n};\n\nexport default NussinovPlot;\n","import * as d3 from 'd3';\nimport { useRef, useEffect } from 'react';\n\ninterface Link {\n  readonly source: number;\n  readonly target: number;\n  readonly value: number;\n  readonly nussinovPair: boolean;\n  readonly inBulge: boolean;\n}\n\ninterface Node {\n  readonly id: number;\n}\n\nexport interface IForceGraphProps {\n  bases: string,\n  pairs: [number, number][]\n}\n\nconst clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\n\n// Copyright 2021 Observable, Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/force-directed-graph\nfunction drawForceGraph(\n  { nodes, links, bases }: any,\n  {\n    width = 800,\n    height = 600,\n    windowBuffer = 10,\n    windowBounds = 800,\n    linkColor = '#555',\n    linkOpacity = 0.7,\n    nodeRadiusPixels = 5,\n    nodeColor = '#999',\n    nodeFontSizeEm = '0.4em',\n  }: any = { },\n) {\n  function intern(value: any) {\n    return value !== null && typeof value === 'object' ? value.valueOf() : value;\n  }\n\n  const N = d3.map(nodes, (d: any) => d.id).map(intern);\n  const LS = d3.map(links, ({ source }: any) => source).map(intern);\n  const LT = d3.map(links, ({ target }: any) => target).map(intern);\n\n  nodes = d3.map(nodes, (_, i) => ({ id: N[i] })); // eslint-disable-line\n  links = d3.map(links, (_, i) => ({ // eslint-disable-line\n    source: LS[i],\n    target: LT[i],\n    nussinovPair: links[i].nussinovPair,\n    inBulge: links[i].inBulge,\n  }));\n\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({ index: i }: any) => N[i]);\n\n  forceNode.strength(-5);\n\n  forceLink.strength((link: any): number => {\n    if (link.nussinovPair) {\n      return 0.5;\n    }\n    return 0.8;\n  });\n\n  forceLink.distance((link: any): number => {\n    if (link.nussinovPair) {\n      return 25;\n    }\n    return link.inBulge ? 15 : 8;\n  });\n\n  const svg = d3.create('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('viewBox', [-width / 2, -height / 2, width, height])\n    .attr('style', 'max-width: 100%; height: auto; height: intrinsic;');\n\n  let tick = 0;\n\n  const simulation = d3.forceSimulation(nodes)\n    .force('link', forceLink)\n    .force('charge', forceNode)\n    .force('center', d3.forceCenter())\n    .on('tick', () => {\n      /* eslint-disable no-param-reassign */\n      if (tick === 0) {\n        let theta = 0;\n        const tau = 2 * Math.PI;\n        const radius = nodes.length;\n        for (let i = 0; i < nodes.length; i += 1) {\n          nodes[i].x = radius * Math.cos(theta);\n          nodes[i].y = radius * Math.sin(theta);\n          theta += tau / nodes.length;\n        }\n      }\n\n      tick += 1;\n\n      link // eslint-disable-line\n        .attr('x1', (d: any) => d.source.x)\n        .attr('y1', (d: any) => d.source.y)\n        .attr('x2', (d: any) => d.target.x)\n        .attr('y2', (d: any) => d.target.y);\n\n      node // eslint-disable-line\n        .attr('cx', (d: any) => d.x)\n        .attr('cy', (d: any) => d.y);\n\n      circles // eslint-disable-line\n        .attr('cx', (d: any) => d.x)\n        .attr('cy', (d: any) => d.y);\n\n      bpText // eslint-disable-line\n        .attr('x', (d: any) => d.x)\n        .attr('y', (d: any) => d.y);\n\n      if (nodes.length > 0) {\n        let window = [nodes[0].x, nodes[0].y, nodes[0].x, nodes[0].y];\n        for (let i = 1; i < nodes.length; i += 1) {\n          window = [\n            Math.min(nodes[i].x, window[0]),\n            Math.min(nodes[i].y, window[1]),\n            Math.max(nodes[i].x, window[2]),\n            Math.max(nodes[i].y, window[3])];\n        }\n\n        svg\n          .attr('viewBox', [\n            clamp(window[0] - windowBuffer, -windowBounds, windowBounds),\n            clamp(window[1] - windowBuffer, -windowBounds, windowBounds),\n            clamp(window[2] - window[0] + 2 * windowBuffer, -windowBounds, windowBounds),\n            clamp(window[3] - window[1] + 2 * windowBuffer, -windowBounds, windowBounds),\n          ]);\n      }\n    });\n\n  const link = svg.append('g')\n    .attr('stroke', linkColor)\n    .attr('stroke-opacity', linkOpacity)\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('stroke-dasharray', (l: any): string => (l.nussinovPair ? '1' : ''));\n\n  const node = svg.selectAll('circle')\n    .attr('stroke', nodeColor)\n    .data(nodes)\n    .enter()\n    .append('g');\n\n  const circles = node.append('circle')\n    .attr('r', nodeRadiusPixels)\n    .call(drag(simulation)); // eslint-disable-line\n\n  const bpText = node.append('text')\n    .style('fill', 'white')\n    .style('font-size', nodeFontSizeEm)\n    .attr('text-anchor', 'middle')\n    .attr('dy', nodeFontSizeEm)\n    .attr('pointer-events', 'none')\n    .text((n: any): string => bases[n.id]);\n\n  function drag(sim: any): any {\n  /* eslint-disable no-param-reassign */\n    function dragstarted(event: any) {\n      if (!event.active) sim.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event: any) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event: any) {\n      if (!event.active) sim.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    return d3.drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  }\n\n  return Object.assign(svg.node(), { });\n}\n\nconst ForceGraph = function ForceGraph(props: IForceGraphProps): JSX.Element {\n  const { bases, pairs } = props;\n  const n = bases.length;\n\n  const nodes: Node[] = [];\n  const links: Link[] = [];\n  const pairedNodes: Set<number> = new Set<number>();\n  let i = 0;\n\n  for (; i < pairs.length; i += 1) {\n    const l: Link = {\n      source: +pairs[i][0],\n      target: +pairs[i][1],\n      value: 1,\n      nussinovPair: true,\n      inBulge: false,\n    };\n    if (l.source < n && l.target < n) {\n      links.push(l);\n    }\n    pairedNodes.add(l.source);\n    pairedNodes.add(l.target);\n  }\n\n  for (i = 0; i < n; i += 1) {\n    if (i < n - 1) {\n      links.push({\n        source: i,\n        target: i + 1,\n        value: 1,\n        nussinovPair: false,\n        inBulge: !pairedNodes.has(i) || !pairedNodes.has(i + 1),\n      });\n    }\n    nodes.push({ id: i });\n  }\n\n  const forceGraph = {\n    nodes,\n    links,\n    bases,\n  };\n\n  const drawnGraph = drawForceGraph(forceGraph);\n  const svg = useRef<SVGSVGElement>(null);\n  useEffect(() => {\n    if (svg.current) {\n      svg.current.appendChild(drawnGraph);\n    }\n  }, []);\n\n  return (\n    <svg width=\"1200\" height=\"1200\" ref={svg} />\n  );\n};\n\nexport default ForceGraph;\n","enum Backtrace {\n  Bifurcate,\n  Left,\n  Down,\n  Matched,\n  Unmatched,\n}\n\nfunction backtrack(bt: [Backtrace, number][][], pairs: [number, number][], i: number, j: number) {\n  if (i < j) {\n    const back: Backtrace = bt[i][j][0];\n    if (back === Backtrace.Matched) {\n      pairs.push([i, j]);\n      backtrack(bt, pairs, i + 1, j - 1);\n    } else if (back === Backtrace.Left) {\n      backtrack(bt, pairs, i, j - 1);\n    } else if (back === Backtrace.Down) {\n      backtrack(bt, pairs, i + 1, j);\n    } else if (back === Backtrace.Bifurcate) {\n      const k = bt[i][j][1];\n      backtrack(bt, pairs, i, k);\n      backtrack(bt, pairs, k + 1, j);\n    } else if (back === Backtrace.Unmatched) {\n      backtrack(bt, pairs, i + 1, j - 1);\n    }\n  }\n}\n\nexport default function nussinov(rna: string, minHairpinLength: number = 2, pairs: Set<string> = new Set(['AU', 'UA', 'GC', 'CG'])) {\n  const n = rna.length;\n  const dp: number[][] = Array.from({ length: n }, () => Array.from({ length: n }, () => 0));\n  const bt: [Backtrace, number][][] = Array.from(\n    { length: n },\n    () => Array.from({ length: n }, () => [Backtrace.Unmatched, 0]),\n  );\n\n  for (let j = 0; j < n; j += 1) {\n    for (let i = j - minHairpinLength; i >= 0; i -= 1) {\n      let m = dp[i + 1][j - 1];\n      let back: [Backtrace, number] = [Backtrace.Unmatched, 0];\n      if (pairs.has(rna.charAt(i) + rna.charAt(j))) {\n        back = [Backtrace.Matched, 0];\n        m += 1;\n      }\n\n      if (dp[i + 1][j] > m) {\n        back = [Backtrace.Down, 0];\n        m = dp[i + 1][j];\n      } else if (dp[i][j - 1] > m) {\n        back = [Backtrace.Left, 0];\n        m = dp[i][j - 1];\n      }\n\n      for (let k = i + 1; k < j; k += 1) {\n        if (dp[i][k] + dp[k + 1][j] > m) {\n          back = [Backtrace.Bifurcate, k];\n          m = dp[i][k] + dp[k + 1][j];\n        }\n      }\n\n      dp[i][j] = m;\n      bt[i][j] = back;\n    }\n  }\n\n  const indexPairs: [number, number][] = [];\n  backtrack(bt, indexPairs, 0, n - 1);\n  return indexPairs;\n}\n\n/**\n * Returns the dot-parentheses format of base pairings\n * @param numBases the total number of bases\n * @param pairs an array of base pairs by index\n * @returns the dot-parentheses representation of the base pairings\n */\nexport function dotParentheses(numBases: number, pairs: [number, number][]): string {\n  const resultArr = Array(numBases).fill('.');\n  for (let i = 0; i < pairs.length; i += 1) {\n    resultArr[pairs[i][0]] = '(';\n    resultArr[pairs[i][1]] = ')';\n  }\n  return resultArr.join('');\n}\n","import React, { useEffect } from 'react';\nimport NussinovPlot from './NussinovPlot';\nimport ForceGraph from './ForceGraph';\nimport 'bootswatch/dist/cerulean/bootstrap.css';\nimport nussinov, { dotParentheses } from './nussinov';\nimport { bioCheck, sanitizeRNAString } from './cleanFastaFile';\n\nconst App = function App() {\n  const [bases, setBases] = React.useState('');\n  const [pairs, setPairs] = React.useState<[number, number][]>([]);\n  const [minHairpin, setMinHairpin] = React.useState<number>();\n  const [warnings, setWarnings] = React.useState<Array<string>>([]);\n  const [isDNAtoRNA, setIsDNAtoRNA] = React.useState<boolean>(false);\n  const [dotParenthesesOutput, setDotParenthesesOutput] = React.useState<string>('');\n\n  /**\n   * Sets the graph as a new set of bases\n   * @param newBases List of bases, as a string\n   */\n  function updateBases(newBases: string) {\n    const [filteredStr, rnaSanitizeWarns] = sanitizeRNAString(newBases);\n    let rnaWarnings: Array<string> = rnaSanitizeWarns;\n    rnaWarnings = rnaWarnings.concat(bioCheck(filteredStr));\n    setWarnings(rnaWarnings);\n    setIsDNAtoRNA(newBases.toUpperCase().includes('T'));\n    const newPairs = nussinov(filteredStr, minHairpin);\n    setPairs(newPairs);\n    setDotParenthesesOutput(dotParentheses(filteredStr.length, newPairs));\n    setBases(filteredStr);\n  }\n\n  useEffect(() => {\n    // Called on component load\n    const defaultBases = 'GAUUACAGAUAA';\n    const defaultMinHairpin = 2;\n    setMinHairpin(defaultMinHairpin);\n    updateBases(defaultBases);\n  }, []);\n\n  function updateMinHairpin(newMinHairpin: number) {\n    const clampedMinHairpin = Math.min(bases.length, Math.max(1, newMinHairpin));\n    setMinHairpin(clampedMinHairpin);\n    updateBases(bases);\n  }\n\n  const warningsElements: Array<JSX.Element> = warnings.map((warningStr) => (\n    <div className=\"alert alert-info\">\n      {warningStr}\n    </div>\n  ));\n\n  const dnaToRnaSnippet: JSX.Element = isDNAtoRNA ? <span className=\"h5 badge bg-primary\" style={{ transform: 'scale(0.7)' }}>DNA&#10142;RNA</span> : <span />;\n\n  return (\n    <div className=\"container-sm\">\n      <h1 className=\"text-center\">Nussinov RNA Secondary Structure Visualizer</h1>\n      <p className=\"text-center\">by jaa2, Jpn3, and SethWyma</p>\n      <div className=\"row g-3\">\n        <div className=\"col-9\">\n          <label htmlFor=\"bases-input\" className=\"form-label\">Bases of the RNA strand</label>\n          <input className=\"form-control\" id=\"bases-input\" type=\"text\" placeholder=\"GAUUACAGAUAA...\" onChange={(e) => { updateBases(e.target.value); }} />\n        </div>\n        <div className=\"col-3\">\n          <label htmlFor=\"bases-input\" className=\"form-label\">Minimum hairpin length</label>\n          <input className=\"form-control\" id=\"min-hairpin-input\" type=\"number\" value={minHairpin} onChange={(e) => { updateMinHairpin(+e.target.value); }} />\n        </div>\n      </div>\n\n      <br />\n      <h3>\n        Nussinov Plot\n        {dnaToRnaSnippet}\n      </h3>\n      <NussinovPlot key={`C${bases}_${minHairpin}`} bases={bases} pairs={pairs} />\n      <ForceGraph key={`F${bases}_${minHairpin}`} bases={bases} pairs={pairs} />\n      <br />\n      <h3>Dot-Parentheses Format</h3>\n      <div\n        className=\"px-2\"\n        style={{\n          backgroundColor: '#868e96', color: '#dee2e6', fontFamily: 'monospace', borderRadius: '10px', overflowWrap: 'anywhere',\n        }}\n      >\n        {dotParenthesesOutput}\n      </div>\n      <br />\n      {warningsElements}\n    </div>\n  );\n};\n\nexport default App;\n","// Message if both DNA and RNA bases are included\nexport const mixedInputMessage: string = 'Both DNA bases (T) and RNA bases (U) found in input. Mixed input not expected.';\n\n/**\n * Sanitizes an string of RNA bases and converts DNA to RNA.\n * @param data An RNA string, a DNA string, or a FASTA file type string\n * @returns an array containing the cleaned RNA string and all warning messages\n */\nexport function sanitizeRNAString(data: string): [string, string[]] {\n  const dataArr: string[] = data.split(' ');\n  let basePairsStr:string = dataArr[dataArr.length - 1];\n  basePairsStr = basePairsStr.toUpperCase();\n\n  const messages: string[] = [];\n\n  // Check if DNA and RNA are both (possibly) present\n  if (basePairsStr.includes('T') && basePairsStr.includes('U')) {\n    messages.push(mixedInputMessage);\n  }\n\n  // Converts DNA to RNA\n  basePairsStr = basePairsStr.replace(/T/g, 'U');\n  const rnaStr = basePairsStr.replaceAll(/[^GACU]/g, '');\n\n  if (rnaStr.length !== basePairsStr.length) {\n    // We are ignoring some characters\n    const message = `Characters ignored: ${basePairsStr.replaceAll(/[GACU]/g, '')}`;\n    messages.push(message);\n  }\n\n  // No characters are ignored\n  return [rnaStr, messages];\n}\n\n/**\n * This function checks for some common RNA string errors and then returns an array that notes them\n * @param data A cleaned string from the sanitizeRNAString function\n * @returns an array of the potential errors of the passed RNA string\n */\nexport function bioCheck(data: string): string[] {\n  if (data.length === 0) {\n    return [];\n  }\n  const messages: string[] = [];\n  if (data.length % 3 !== 0) {\n    messages.push('The RNA sequence is not divisible by 3; the string has an ambiguous protein.');\n  }\n  if (data.length >= 3) {\n    let end = '';\n    end = end.concat(\n      (data[data.length - 3]).toString(),\n      (data[data.length - 2]).toString(),\n      (data[data.length - 1]).toString(),\n    );\n    if (!(end === 'UAA' || end === 'UAG' || end === 'UGA')) {\n      messages.push('The RNA sequence does not contain a proper end sequence.');\n    }\n  }\n  return (messages);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}